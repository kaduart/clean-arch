// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/devfull/25-clean-architeture/internal/entity"
	"github.com/devfull/25-clean-architeture/internal/infra/database"
	"github.com/devfull/25-clean-architeture/internal/infra/event"
	"github.com/devfull/25-clean-architeture/internal/infra/event/handler"
	"github.com/devfull/25-clean-architeture/internal/infra/web"
	"github.com/devfull/25-clean-architeture/internal/usecase"
	"github.com/devfull/25-clean-architeture/pkg/events"
	"github.com/google/wire"
	"github.com/rabbitmq/amqp091-go"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func InitializeCreateOrderUseCase(db *sql.DB, rabbitMQChannel *amqp091.Channel) *usecase.CreateOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	eventDispatcher := events.NewEventDispatcher()
	orderCreatedEvent := event.NewOrderCreatedEvent()
	orderCreatedHandler := handler.NewOrderCreatedHandler(rabbitMQChannel)
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, eventDispatcher, orderCreatedEvent, orderCreatedHandler)
	return createOrderUseCase
}

func InitializeListOrdersUseCase(db *sql.DB) *usecase.ListOrdersUseCase {
	orderRepository := database.NewOrderRepository(db)
	listOrdersUseCase := usecase.NewListOrdersUseCase(orderRepository)
	return listOrdersUseCase
}

func InitializeWebOrderHandler(db *sql.DB, rabbitMQChannel *amqp091.Channel) *web.WebOrderHandler {
	createOrderUseCase := InitializeCreateOrderUseCase(db, rabbitMQChannel)
	listOrdersUseCase := InitializeListOrdersUseCase(db)
	webOrderHandler := web.NewWebOrderHandler(createOrderUseCase, listOrdersUseCase)
	return webOrderHandler
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(database.NewOrderRepository, wire.Bind(new(entity.OrderRepositoryInterface), new(*database.OrderRepository)))

var setListOrdersDependency = wire.NewSet(
	setOrderRepositoryDependency, usecase.NewListOrdersUseCase,
)

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setOrderCreatedEvent = wire.NewSet(event.NewOrderCreatedEvent, wire.Bind(new(events.EventInterface), new(*event.OrderCreatedEvent)))

var setOrderCreatedHandler = wire.NewSet(handler.NewOrderCreatedHandler, wire.Bind(new(events.EventHandlerInterface), new(*handler.OrderCreatedHandler)))
